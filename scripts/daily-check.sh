#!/bin/bash
# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Kind –∫–ª–∞—Å—Ç–µ—Ä–∞

echo "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Kind –∫–ª–∞—Å—Ç–µ—Ä–∞ - $(date)"
echo "================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    if [ "$1" = "OK" ]; then
        echo "‚úÖ $2"
    elif [ "$1" = "WARN" ]; then
        echo "‚ö†Ô∏è $2"
    else
        echo "‚ùå $2"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
if ! kind get clusters | grep -q learning-cluster; then
    print_status "ERROR" "Kind –∫–ª–∞—Å—Ç–µ—Ä 'learning-cluster' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä: ./scripts/migrate-to-kind.sh"
    exit 1
fi

echo "1. üñ•Ô∏è Node Health:"
NODE_STATUS=$(kubectl get nodes --no-headers | awk '{print $2}')
if [ "$NODE_STATUS" = "Ready" ]; then
    print_status "OK" "–£–∑–µ–ª –∫–ª–∞—Å—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤"
    kubectl get nodes
else
    print_status "ERROR" "–£–∑–µ–ª –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤: $NODE_STATUS"
fi

echo ""
echo "2. üì¶ Pod Health Check:"
TOTAL_MONITORING_PODS=$(kubectl get pods -n monitoring --no-headers | wc -l)
RUNNING_MONITORING_PODS=$(kubectl get pods -n monitoring --no-headers | grep -c "Running")

if [ "$RUNNING_MONITORING_PODS" -eq "$TOTAL_MONITORING_PODS" ]; then
    print_status "OK" "–í—Å–µ –ø–æ–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç ($RUNNING_MONITORING_PODS/$TOTAL_MONITORING_PODS)"
else
    print_status "WARN" "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç ($RUNNING_MONITORING_PODS/$TOTAL_MONITORING_PODS)"
    kubectl get pods -n monitoring | grep -v "Running"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–¥—ã
FAILED_SYSTEM_PODS=$(kubectl get pods -A --field-selector=status.phase=Failed --no-headers | wc -l)
if [ "$FAILED_SYSTEM_PODS" -gt 0 ]; then
    print_status "WARN" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã failed –ø–æ–¥—ã: $FAILED_SYSTEM_PODS"
    kubectl get pods -A --field-selector=status.phase=Failed
else
    print_status "OK" "–ù–µ—Ç failed –ø–æ–¥–æ–≤"
fi

echo ""
echo "3. üåê Service Accessibility:"

# –¢–µ—Å—Ç Grafana
GRAFANA_TEST=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:3000 || echo "000")
if [ "$GRAFANA_TEST" = "200" ] || [ "$GRAFANA_TEST" = "302" ]; then
    print_status "OK" "Grafana –¥–æ—Å—Ç—É–ø–Ω–∞ (HTTP $GRAFANA_TEST)"
else
    print_status "ERROR" "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (HTTP $GRAFANA_TEST)"
fi

# –¢–µ—Å—Ç Prometheus
PROMETHEUS_TEST=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:9090 || echo "000")
if [ "$PROMETHEUS_TEST" = "200" ]; then
    print_status "OK" "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $PROMETHEUS_TEST)"
else
    print_status "ERROR" "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $PROMETHEUS_TEST)"
fi

# –¢–µ—Å—Ç Alertmanager
ALERTMANAGER_TEST=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:9093 || echo "000")
if [ "$ALERTMANAGER_TEST" = "200" ]; then
    print_status "OK" "Alertmanager –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $ALERTMANAGER_TEST)"
else
    print_status "ERROR" "Alertmanager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $ALERTMANAGER_TEST)"
fi

echo ""
echo "4. üìä Resource Usage:"
if kubectl top nodes &>/dev/null; then
    echo "CPU –∏ Memory –ø–æ —É–∑–ª–∞–º:"
    kubectl top nodes
    
    echo ""
    echo "Top 5 –ø–æ–¥–æ–≤ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –ø–∞–º—è—Ç–∏:"
    kubectl top pods -A --sort-by=memory | head -6
    
    echo ""
    echo "Top 5 –ø–æ–¥–æ–≤ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é CPU:"
    kubectl top pods -A --sort-by=cpu | head -6
else
    print_status "WARN" "Metrics server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "5. üíæ Storage Health:"
PVC_COUNT=$(kubectl get pvc -A --no-headers | wc -l)
if [ "$PVC_COUNT" -gt 0 ]; then
    echo "PersistentVolumeClaims:"
    kubectl get pvc -A
else
    print_status "OK" "–ù–µ—Ç PVC (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –¥–µ–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∞)"
fi

echo ""
echo "6. üõ°Ô∏è Security Status:"
# –ü—Ä–æ–≤–µ—Ä—è–µ–º RBAC
CLUSTER_ROLES=$(kubectl get clusterroles --no-headers | wc -l)
echo "ClusterRoles: $CLUSTER_ROLES"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º ServiceAccounts
SA_COUNT=$(kubectl get serviceaccounts -A --no-headers | wc -l)
echo "ServiceAccounts: $SA_COUNT"

echo ""
echo "7. üîÑ Recent Events (last 10):"
kubectl get events --sort-by='.lastTimestamp' -A | tail -10

echo ""
echo "8. üìà Prometheus Targets Status:"
if curl -s http://localhost:9090/api/v1/targets 2>/dev/null | grep -q '"health":"up"'; then
    UP_TARGETS=$(curl -s http://localhost:9090/api/v1/targets 2>/dev/null | grep -o '"health":"up"' | wc -l)
    DOWN_TARGETS=$(curl -s http://localhost:9090/api/v1/targets 2>/dev/null | grep -o '"health":"down"' | wc -l)
    print_status "OK" "Prometheus targets: $UP_TARGETS up, $DOWN_TARGETS down"
else
    print_status "WARN" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Prometheus targets"
fi

echo ""
echo "9. üö® Active Alerts:"
if curl -s http://localhost:9093/api/v1/alerts 2>/dev/null | grep -q '"status":"firing"'; then
    FIRING_ALERTS=$(curl -s http://localhost:9093/api/v1/alerts 2>/dev/null | grep -o '"status":"firing"' | wc -l)
    print_status "WARN" "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: $FIRING_ALERTS"
else
    print_status "OK" "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
fi

echo ""
echo "üìã Summary:"
echo "================================================="
EXTERNAL_IP=$(hostname -I | awk '{print $1}')
echo "üåü –ö–ª–∞—Å—Ç–µ—Ä: kind-learning-cluster"
echo "üñ•Ô∏è –£–∑–ª–æ–≤: 1 (Ready)"  
echo "üì¶ –ü–æ–¥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $RUNNING_MONITORING_PODS/$TOTAL_MONITORING_PODS"
echo "üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://$EXTERNAL_IP:3000"

if [ "$RUNNING_MONITORING_PODS" -eq "$TOTAL_MONITORING_PODS" ] && 
   [ "$GRAFANA_TEST" = "200" -o "$GRAFANA_TEST" = "302" ] && 
   [ "$PROMETHEUS_TEST" = "200" ]; then
    print_status "OK" "–ö–ª–∞—Å—Ç–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω!"
else
    print_status "WARN" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ"
fi

echo ""
echo "üîß Quick fixes if needed:"
echo "  kubectl rollout restart deployment -n monitoring   # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "  kind delete cluster --name=learning-cluster       # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
echo "  ./scripts/migrate-to-kind.sh                      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $(date)"

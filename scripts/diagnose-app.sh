#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Kubernetes

set -e

APP_NAME=${1:-""}
NAMESPACE=${2:-"default"}

if [ -z "$APP_NAME" ]; then
    echo "üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <app-name> [namespace]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 grafana monitoring"
    echo "  $0 hello-world default"
    echo "  $0 nginx"
    exit 1
fi

echo "üîç === –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $APP_NAME ==="
echo "Namespace: $NAMESPACE"
echo "–í—Ä–µ–º—è: $(date)"
echo "============================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ namespace
if ! kubectl get namespace "$NAMESPACE" &>/dev/null; then
    echo "‚ùå Namespace '$NAMESPACE' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

echo ""
echo "üìä 1. Deployment Status:"
if kubectl get deployment $APP_NAME -n $NAMESPACE &>/dev/null; then
    kubectl get deployment $APP_NAME -n $NAMESPACE -o wide
    echo ""
    echo "Deployment –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:"
    kubectl describe deployment $APP_NAME -n $NAMESPACE | grep -A 10 -E "(Replicas|Conditions|Events)"
else
    echo "‚ö†Ô∏è  Deployment '$APP_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace '$NAMESPACE'"
fi

echo ""
echo "üöÄ 2. Pod Status:"
PODS=$(kubectl get pods -l app=$APP_NAME -n $NAMESPACE --no-headers 2>/dev/null)
if [ -n "$PODS" ]; then
    kubectl get pods -l app=$APP_NAME -n $NAMESPACE -o wide
    echo ""
    echo "Pod –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:"
    for pod in $(kubectl get pods -l app=$APP_NAME -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
        echo "--- Pod: $pod ---"
        kubectl describe pod $pod -n $NAMESPACE | grep -A 5 -E "(Status|Conditions|Events)" | head -20
    done
else
    echo "‚ùå Pod'—ã —Å label app=$APP_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ namespace '$NAMESPACE'"
    echo "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏:"
    kubectl get pods -n $NAMESPACE | grep "$APP_NAME" || echo "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""
echo "üåê 3. Service Status:"
SERVICES=$(kubectl get svc -l app=$APP_NAME -n $NAMESPACE --no-headers 2>/dev/null)
if [ -n "$SERVICES" ]; then
    kubectl get svc -l app=$APP_NAME -n $NAMESPACE -o wide
    echo ""
    echo "Endpoints:"
    for svc in $(kubectl get svc -l app=$APP_NAME -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
        kubectl get endpoints $svc -n $NAMESPACE
    done
else
    echo "‚ö†Ô∏è  Service —Å label app=$APP_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏:"
    kubectl get svc -n $NAMESPACE | grep "$APP_NAME" || echo "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""
echo "üîó 4. Ingress Status:"
INGRESS=$(kubectl get ingress -n $NAMESPACE --no-headers 2>/dev/null | grep "$APP_NAME" || true)
if [ -n "$INGRESS" ]; then
    kubectl get ingress -n $NAMESPACE | grep -E "(NAME|$APP_NAME)"
    echo ""
    echo "Ingress –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:"
    kubectl describe ingress -n $NAMESPACE | grep -A 10 -B 5 "$APP_NAME"
else
    echo "‚ö†Ô∏è  Ingress –¥–ª—è '$APP_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""
echo "üìù 5. Recent Events for $APP_NAME:"
EVENTS=$(kubectl get events --field-selector involvedObject.name~=$APP_NAME -n $NAMESPACE --no-headers 2>/dev/null | head -10)
if [ -n "$EVENTS" ]; then
    kubectl get events --field-selector involvedObject.name~=$APP_NAME -n $NAMESPACE | head -10
else
    echo "üîç –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è namespace:"
    kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -10
fi

echo ""
echo "üìã 6. Pod Logs:"
POD_NAMES=$(kubectl get pods -l app=$APP_NAME -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)
if [ -n "$POD_NAMES" ]; then
    for pod in $POD_NAMES; do
        echo "--- –õ–æ–≥–∏ Pod: $pod (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫) ---"
        kubectl logs $pod -n $NAMESPACE --tail=20 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"
        
        # –ï—Å–ª–∏ Pod –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è, –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        RESTART_COUNT=$(kubectl get pod $pod -n $NAMESPACE -o jsonpath='{.status.containerStatuses[0].restartCount}' 2>/dev/null || echo "0")
        if [ "$RESTART_COUNT" -gt 0 ]; then
            echo "--- –õ–æ–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: $RESTART_COUNT) ---"
            kubectl logs $pod -n $NAMESPACE --previous --tail=10 2>/dev/null || echo "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    done
else
    echo "‚ùå Pod'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"
fi

echo ""
echo "üìà 7. Resource Usage:"
if kubectl top pods -l app=$APP_NAME -n $NAMESPACE &>/dev/null; then
    kubectl top pods -l app=$APP_NAME -n $NAMESPACE
else
    echo "‚ö†Ô∏è  Metrics –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (metrics-server –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
fi

echo ""
echo "üîß 8. Configuration Details:"
# ConfigMaps
CONFIGMAPS=$(kubectl get configmaps -n $NAMESPACE --no-headers 2>/dev/null | grep "$APP_NAME" || true)
if [ -n "$CONFIGMAPS" ]; then
    echo "ConfigMaps:"
    echo "$CONFIGMAPS"
else
    echo "ConfigMaps: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# Secrets
SECRETS=$(kubectl get secrets -n $NAMESPACE --no-headers 2>/dev/null | grep "$APP_NAME" || true)
if [ -n "$SECRETS" ]; then
    echo "Secrets:"
    echo "$SECRETS"
else
    echo "Secrets: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo ""
echo "üõ°Ô∏è  9. Security Context:"
if [ -n "$POD_NAMES" ]; then
    for pod in $POD_NAMES; do
        echo "--- Security Context –¥–ª—è Pod: $pod ---"
        kubectl get pod $pod -n $NAMESPACE -o jsonpath='{.spec.securityContext}' 2>/dev/null || echo "Security context –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo ""
        kubectl get pod $pod -n $NAMESPACE -o jsonpath='{.spec.containers[*].securityContext}' 2>/dev/null || echo "Container security context –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo ""
    done
fi

echo ""
echo "üéØ 10. Troubleshooting Suggestions:"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
if [ -z "$PODS" ]; then
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º–∞: Pod'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
    echo "   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –≤ Deployment"
    echo "   - –ù–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —É–∑–ª–∞—Ö"
    echo "   - –°–æ–±—ã—Ç–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞: kubectl get events -n $NAMESPACE"
fi

if [ -n "$PODS" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤
    NOT_RUNNING=$(echo "$PODS" | grep -v "Running" || true)
    if [ -n "$NOT_RUNNING" ]; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Pod'—ã –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ Running"
        echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
    fi
fi

if [ -z "$SERVICES" ] && [ -n "$PODS" ]; then
    echo "‚ö†Ô∏è  Pod'—ã –µ—Å—Ç—å, –Ω–æ Service –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üí° –°–æ–∑–¥–∞–π—Ç–µ Service –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"
fi

if [ -n "$SERVICES" ] && [ -z "$(kubectl get endpoints -l app=$APP_NAME -n $NAMESPACE -o jsonpath='{.items[*].subsets}' 2>/dev/null)" ]; then
    echo "‚ùå Service –µ—Å—Ç—å, –Ω–æ Endpoints –ø—É—Å—Ç—ã–µ"
    echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã Service –∏ labels Pod'–æ–≤"
fi

echo ""
echo "‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '$APP_NAME' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"

# –û–ø—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è demo)
if [ "$3" = "--fix-common" ]; then
    echo ""
    echo "üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º..."
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Deployment –µ—Å–ª–∏ Pod'—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    if [ -n "$NOT_RUNNING" ]; then
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Deployment..."
        kubectl rollout restart deployment/$APP_NAME -n $NAMESPACE 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å deployment"
    fi
fi
